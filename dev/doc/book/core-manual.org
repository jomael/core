#+TITLE: Octaspire Core Manual
#+AUTHOR: www.octaspire.com
#+SETUPFILE: org-minimal-theme.setup
#+LANGUAGE: en
#+OPTIONS: toc:3

** About

*Octaspire Core* is a container, utf-8 and utility library written in standard *C99*.
It depends only on a C99 compiler and standard library.

Octaspire Core is licensed under the Apache License, Version 2.0. See file LICENSE
in the source distribution for more information.

Core uses
[[http://semver.org][Semantic Versioning 2.0.0]] version numbering scheme.
As long as the MAJOR version number is zero anything can change at any time,
even in backwards incompatible manner.



** Building the amalgamated source release

The amalgamated source release is the recommended way of using Core, if you don't need to
modify Core itself. To use the amalgamated release, you will need only a C compiler and
C standard library supporting C99.

*** Linux, FreeBSD, OpenBSD, NetBSD, OpenIndiana, DragonFly BSD, MidnightBSD, MINIX 3, Haiku, Syllable Desktop, macOS

#+BEGIN_SRC sh
curl -O octaspire.com/core/release.tar.bz2
tar jxf release.tar.bz2
cd release/*
curl -O https://octaspire.github.io/core/checksums
sha512sum -c checksums
sh how-to-build/YOUR_PLATFORM_NAME_HERE.XX
#+END_SRC

replace *YOUR_PLATFORM_NAME_HERE.XX* with *FreeBSD.sh*, *NetBSD.sh*, *OpenBSD.sh*, *OpenIndiana.sh*,
*DragonFlyBSD.sh*, *MidnightBSD*, *linux.sh*, *minix3.sh*, *haiku.sh*,
*SyllableDesktop.sh* or *macOS.sh*.
More scripts for different platforms will be added later.


*** Windows using MinGW and Git

Download and install *MinGW* from
[[http://www.mingw.org][www.mingw.org]] into a directory, for example into =C:\MinGW=.
Install *GCC* compiler.
Add =MinGW\bin= into the =PATH=
(for example, if you installed into =C:\MinGW=, add =C:\MinGW\bin= into the =PATH=).

Download and install [[https://git-scm.com/download/win][Git for Windows]].

Start *Git Bash* and run the following commands:

#+BEGIN_SRC sh
git clone https://github.com/octaspire/core.git
cd core/release
how-to-build/windows.sh
#+END_SRC

Start *Windows Command Prompt* and change directory to the same release directory, as
above. Run examples and programs in the *Command Prompt* window
(NOT in the Git Bash window).


*** Running unit tests

This is all there should be to it; when make finishes, everything should be ready.

To run the unit tests:

#+BEGIN_SRC sh
test/octaspire-core-test-runner
#+END_SRC



** Quick tour of library features

Here we take a quick look at the features of the library.

*** Naming

C doesn't have namespaces. To prevent name collisions, all names in the library
are prefixed with *octaspire_*. For example, *octaspire_container_utf8_string_t*
is the string type and *octaspire_container_utf8_string_new* is one of the functions
that create new strings. *octaspire_container_vector_t* is the vector type and
*octaspire_container_hash_map_t* is the hash-map type.

These names can be pretty long, and quite annoying to write in the long run. I personally
like to use the abbrevation features of vi/vim and emacs editors. You can see this setup
in my [[https://github.com/octaspire/dotfiles.git][dotfiles]] for nvi, vim and emacs editors. Your favorite editor or IDE might have
similar functionality also available.

So, I can write *ocus* and hit the spacebar to get *octaspire_container_utf8_string_*.

*** UTF-8 Strings

#+INCLUDE: ../examples/string-example.c src C

*** Vector


#+INCLUDE: ../examples/vector-example.c src C


*** List

TODO



*** Queue

TODO



*** Pair

TODO



*** Hash map


#+INCLUDE: ../examples/hash-map-example.c src C


*** Input streams from memory and files

TODO


*** Lower level helpers

TODO


** Building the development repository

*** Raspberry Pi, Debian and Ubuntu

To build Octaspire Core from source in Raspberry Pi, Debian or Ubuntu (16.04 LTS) system:

#+BEGIN_SRC sh
sudo apt-get install git
git clone https://github.com/octaspire/core.git
cd core
make
#+END_SRC


*** Arch Linux

To build on Arch Linux (Arch Linux ARM) system:

#+BEGIN_SRC sh
sudo pacman -S git gcc make
git clone https://github.com/octaspire/core.git
cd core
make
#+END_SRC


*** Haiku

To build on Haiku (Version Walter (Revision hrev51127) x86_gcc2):

#+BEGIN_SRC sh
pkgman install gcc_x86
git clone https://github.com/octaspire/core.git
cd core
CC=gcc-x86 make
#+END_SRC



*** FreeBSD
To build on FreeBSD (FreeBSD-11.0-RELEASE-arm-armv6-RPI2) system:

#+BEGIN_SRC sh
sudo pkg install git
git clone https://github.com/octaspire/core.git
cd core
make
#+END_SRC


*** MINIX 3
To build on MINIX 3 (minix_R3.3.0-588a35b) system:

#+BEGIN_SRC sh
su root
pkgin install clang binutils git-base
exit
git clone git://github.com/octaspire/core
cd core
make
#+END_SRC


=== Other systems

On different systems the required commands can vary. In any case, You should install
a *C compiler* and *git*.

